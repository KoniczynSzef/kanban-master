// Generated by Xata Codegen 0.29.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
    BaseClientOptions,
    SchemaInference,
    XataRecord,
} from "@xata.io/client";

const tables = [
    {
        name: "kanban_board",
        columns: [
            {
                name: "id",
                type: "uuid",
                notNull: true,
                unique: true,
                defaultValue: "gen_random_uuid()",
            },
            {
                name: "name",
                type: "varchar",
                notNull: true,
                unique: false,
                defaultValue: null,
            },
            {
                name: "project_id",
                type: "uuid",
                notNull: true,
                unique: false,
                defaultValue: null,
            },
        ],
    },
    {
        name: "kanban_column",
        columns: [
            {
                name: "board_id",
                type: "uuid",
                notNull: true,
                unique: false,
                defaultValue: null,
            },
            {
                name: "id",
                type: "uuid",
                notNull: true,
                unique: true,
                defaultValue: "gen_random_uuid()",
            },
            {
                name: "name",
                type: "varchar",
                notNull: true,
                unique: false,
                defaultValue: null,
            },
        ],
    },
    {
        name: "kanban_task",
        columns: [
            {
                name: "assignee_id",
                type: "uuid",
                notNull: false,
                unique: false,
                defaultValue: "gen_random_uuid()",
            },
            {
                name: "board_id",
                type: "uuid",
                notNull: true,
                unique: false,
                defaultValue: null,
            },
            {
                name: "column_id",
                type: "uuid",
                notNull: true,
                unique: false,
                defaultValue: null,
            },
            {
                name: "column_index",
                type: "int",
                notNull: true,
                unique: false,
                defaultValue: null,
            },
            {
                name: "created_at",
                type: "timestamp without time zone",
                notNull: true,
                unique: false,
                defaultValue: "now()",
            },
            {
                name: "creator_id",
                type: "uuid",
                notNull: false,
                unique: false,
                defaultValue: "gen_random_uuid()",
            },
            {
                name: "deadline",
                type: "timestamp without time zone",
                notNull: false,
                unique: false,
                defaultValue: null,
            },
            {
                name: "description",
                type: "varchar",
                notNull: false,
                unique: false,
                defaultValue: null,
            },
            {
                name: "id",
                type: "uuid",
                notNull: true,
                unique: true,
                defaultValue: "gen_random_uuid()",
            },
            {
                name: "note",
                type: "varchar",
                notNull: false,
                unique: false,
                defaultValue: null,
            },
            {
                name: "priority",
                type: "varchar",
                notNull: false,
                unique: false,
                defaultValue: null,
            },
            {
                name: "title",
                type: "varchar",
                notNull: true,
                unique: false,
                defaultValue: null,
            },
            {
                name: "updated_at",
                type: "timestamp without time zone",
                notNull: true,
                unique: false,
                defaultValue: "now()",
            },
        ],
    },
    {
        name: "project",
        columns: [
            {
                name: "created_at",
                type: "timestamp without time zone",
                notNull: true,
                unique: false,
                defaultValue: "now()",
            },
            {
                name: "description",
                type: "varchar",
                notNull: false,
                unique: false,
                defaultValue: "''::character varying",
            },
            {
                name: "id",
                type: "uuid",
                notNull: true,
                unique: true,
                defaultValue: "gen_random_uuid()",
            },
            {
                name: "name",
                type: "varchar",
                notNull: true,
                unique: false,
                defaultValue: null,
            },
            {
                name: "owner_id",
                type: "uuid",
                notNull: true,
                unique: false,
                defaultValue: null,
            },
            {
                name: "updated_at",
                type: "timestamp without time zone",
                notNull: true,
                unique: false,
                defaultValue: "now()",
            },
        ],
    },
    {
        name: "team",
        columns: [
            {
                name: "created_at",
                type: "timestamp without time zone",
                notNull: true,
                unique: false,
                defaultValue: "now()",
            },
            {
                name: "description",
                type: "varchar",
                notNull: false,
                unique: false,
                defaultValue: null,
            },
            {
                name: "id",
                type: "uuid",
                notNull: true,
                unique: true,
                defaultValue: "gen_random_uuid()",
            },
            {
                name: "name",
                type: "varchar",
                notNull: true,
                unique: false,
                defaultValue: null,
            },
            {
                name: "owner_id",
                type: "uuid",
                notNull: true,
                unique: false,
                defaultValue: null,
            },
            {
                name: "updated_at",
                type: "timestamp without time zone",
                notNull: true,
                unique: false,
                defaultValue: "now()",
            },
        ],
    },
    {
        name: "user",
        columns: [
            {
                name: "bio",
                type: "text",
                notNull: false,
                unique: false,
                defaultValue: null,
            },
            {
                name: "business_email",
                type: "varchar",
                notNull: false,
                unique: false,
                defaultValue: null,
            },
            {
                name: "email",
                type: "varchar",
                notNull: true,
                unique: false,
                defaultValue: null,
            },
            {
                name: "id",
                type: "uuid",
                notNull: true,
                unique: true,
                defaultValue: "gen_random_uuid()",
            },
            {
                name: "kinde_id",
                type: "varchar",
                notNull: true,
                unique: false,
                defaultValue: null,
            },
            {
                name: "name",
                type: "varchar",
                notNull: true,
                unique: false,
                defaultValue: null,
            },
            {
                name: "nickname",
                type: "varchar",
                notNull: false,
                unique: false,
                defaultValue: null,
            },
            {
                name: "picture",
                type: "varchar",
                notNull: true,
                unique: false,
                defaultValue: null,
            },
            {
                name: "surname",
                type: "varchar",
                notNull: false,
                unique: false,
                defaultValue: null,
            },
            {
                name: "team_id",
                type: "uuid",
                notNull: false,
                unique: false,
                defaultValue: null,
            },
            {
                name: "validated",
                type: "bool",
                notNull: true,
                unique: false,
                defaultValue: "false",
            },
        ],
    },
] as const;

export type SchemaTables = typeof tables;
// @ts-expect-error - generated types
export type InferredTypes = SchemaInference<SchemaTables>;

export type KanbanBoard = InferredTypes["kanban_board"];
export type KanbanBoardRecord = KanbanBoard & XataRecord;

export type KanbanColumn = InferredTypes["kanban_column"];
export type KanbanColumnRecord = KanbanColumn & XataRecord;

export type KanbanTask = InferredTypes["kanban_task"];
export type KanbanTaskRecord = KanbanTask & XataRecord;

export type Project = InferredTypes["project"];
export type ProjectRecord = Project & XataRecord;

export type Team = InferredTypes["team"];
export type TeamRecord = Team & XataRecord;

export type User = InferredTypes["user"];
export type UserRecord = User & XataRecord;

export type DatabaseSchema = {
    kanban_board: KanbanBoardRecord;
    kanban_column: KanbanColumnRecord;
    kanban_task: KanbanTaskRecord;
    project: ProjectRecord;
    team: TeamRecord;
    user: UserRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
    databaseURL: process.env.XATA_DATABASE_URL,
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
    constructor(options?: BaseClientOptions) {
        // @ts-expect-error - generated types
        super({ ...defaultOptions, ...options }, tables);
    }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
    if (instance) return instance;

    instance = new XataClient();
    return instance;
};
